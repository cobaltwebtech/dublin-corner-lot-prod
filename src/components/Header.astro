---
import { Icon } from "astro-icon/components";
import ThemeSwitcher from "@/components/ThemeSwitcher.astro";
import Logo from "@/components/Logo.astro";
import { Button } from "@/components/starwind/button";
import type { NavItem } from "@/types";

// Define array of menu items
const navItems: Array<NavItem> = [
  { title: "About Us", url: "/#about-us" },
  { title: "History", url: "/#history" },
  { title: "Our Mission", url: "/#our-mission" },
];
---

<header
  id="page-header"
  class="border-border bg-offset text-default sticky inset-x-0 top-0 z-20 flex w-full items-center justify-between border-b-2 px-8 py-4"
>
  <a class="flex items-center gap-3" href="/">
    <Logo class="w-28" />
    <div>
      <div class="flex items-center gap-6">
        <nav class="hidden lg:block">
          <ul class="flex items-center gap-6">
            {
              navItems.map(({ title, url }) => (
                <li>
                  <a class="text-lg font-semibold" href={url}>
                    {title}
                  </a>
                </li>
              ))
            }
          </ul>
        </nav>
        <div class="lg:hidden">
          <Button
            href="/donate"
            aria-label="Donate to Dublin Corner Lot"
            class="text-xs font-extrabold uppercase"
            size="sm"
          >
            Donate Now
          </Button>
        </div>
        <Button
          id="open-nav-button"
          type="button"
          class="btn lg:hidden"
          aria-label="Navigation"
          size="sm"
        >
          <Icon name="menu" class="size-8" />
        </Button>
        <div class="hidden lg:block">
          <Button
            href="/donate"
            aria-label="Donate to Dublin Corner Lot"
            class="font-extrabold uppercase"
          >
            <Icon name="donate" class="size-8" />
            <span>Donate Now</span>
          </Button>
        </div>
        <ThemeSwitcher />
      </div>
      <div id="menu-modal" class="modal hidden" aria-hidden="true">
        <div class="bg-offset text-default fixed inset-0 px-8 py-4">
          <div class="space-y-4" role="dialog" aria-modal="true">
            <header class="text-right">
              <Button
                id="close-nav-button"
                type="button"
                class="btn"
                aria-label="Close navigation"
              >
                <Icon name="close" class="size-8" />
              </Button>
            </header>
            <div class="flex justify-center">
              <Button
                href="/donate"
                aria-label="Donate to Dublin Corner Lot"
                class="font-extrabold uppercase"
              >
                <Icon name="donate" class="size-8" />
                <span>Donate Now</span>
              </Button>
            </div>
            <nav>
              <ul class="flex flex-col">
                {
                  navItems.map(({ title, url }) => (
                    <li>
                      <a class="block py-4 text-center text-xl" href={url}>
                        {title}
                      </a>
                    </li>
                  ))
                }
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </a>

  <script>
    import MicroModal from "micromodal";
    import invariant from "tiny-invariant";

    const menuModalId = "menu-modal";

    const header = document.querySelector("#page-header") as HTMLElement;
    const page = document.documentElement;
    const menu = document.querySelector(`#${menuModalId} ul`);
    const openNavButton = document.querySelector("#open-nav-button");
    const closeNavButton = document.querySelector("#close-nav-button");

    invariant(header, "header should not be null");
    invariant(menu, "menu should not be null");
    invariant(openNavButton, "openNavButton should not be null");
    invariant(closeNavButton, "closeNavButton should not be null");

    const openMenu = () => {
      MicroModal.show(menuModalId, { disableScroll: true });
    };

    const closeMenu = () => {
      MicroModal.close(menuModalId);
    };

    openNavButton.addEventListener("click", openMenu);
    closeNavButton.addEventListener("click", closeMenu);

    document.addEventListener("scroll", () => {
      const d = page.clientHeight - page.scrollTop - header.offsetHeight;
      header.classList.toggle("fixed-header", d < 0);
    });

    menu.addEventListener("click", (event) => {
      if ((event.target as HTMLElement).tagName === "A") {
        closeMenu();
      }
    });
  </script>

  <noscript>
    <style>
      #open-nav-button {
        display: none;
      }
    </style>
  </noscript>

  <style>
    .modal.is-open {
      @apply block;
    }
  </style>
</header>
